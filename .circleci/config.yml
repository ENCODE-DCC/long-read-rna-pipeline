# CircleCI 2.0 configuration file
# for ENCODE LONG-READ-RNA-SEQ-PIPELINE
# Maintainer: Otto Jolanki

# Defaults and functions
---
defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/long-read-rna-pipeline

python_defaults: &python_defaults
  docker:
    - image: quay.io/encode-dcc/long-read-rna-pipeline:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}
  working_directory: ~/long-read-rna-pipeline

machine_defaults: &machine_defaults
  machine:
    image: circleci/classic:latest
  working_directory: ~/long-read-rna-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

install_singularity: &install_singularity
  name: install singularity
  command: |
    sudo apt-get update
    sudo apt-get install \
    python \
    dh-autoreconf \
    build-essential \
    libarchive-dev \
    squashfs-tools
    wget https://github.com/singularityware/singularity/releases/download/2.6.0/singularity-2.6.0.tar.gz
    tar xvf singularity-2.6.0.tar.gz
    cd singularity-2.6.0
    ./configure --prefix=/usr/local --sysconfdir=/etc
    make
    sudo make install
    singularity --version

# Jobs
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/long-read-rna-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/long-read-rna-pipeline:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG .
            docker push $TAG
            docker logout
          no_output_timeout: 30m

  push_template:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - run: *make_tag
        - run:
            command: |
              source ${BASH_ENV}
              docker pull $TAG
              docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
              docker tag $TAG quay.io/encode-dcc/long-read-rna-pipeline:template 
              docker push quay.io/encode-dcc/long-read-rna-pipeline:template
              docker logout
            no_output_timeout: 30m

  test_get_splice_junctions_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_get_splice_junctions.wdl test/test_task/test_get_splice_junctions_input.json $TAG docker
            python3 src/compare_md5.py --keys_to_inspect test_get_splice_junctions.get_splice_junctions.splice_junctions \
            --metadata_json test_get_splice_junctions_input.metadata.json \
            --reference_json test/test_task/test_get_splice_junctions_reference_md5.json \
            --outfile test_get_splice_junctions_input.result.json
            cat test_get_splice_junctions_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_get_splice_junctions_input.result.json
          no_output_timeout: 30m

  test_get_splice_junctions_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: *install_singularity
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_get_splice_junctions.wdl test/test_task/test_get_splice_junctions_input.json $TAG singularity
            python3 src/compare_md5.py --keys_to_inspect test_get_splice_junctions.get_splice_junctions.splice_junctions \
            --metadata_json test_get_splice_junctions_input.metadata.json \
            --reference_json test/test_task/test_get_splice_junctions_reference_md5.json \
            --outfile test_get_splice_junctions_input.result.json
            cat test_get_splice_junctions_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_get_splice_junctions_input.result.json
          no_output_timeout: 30m

  test_minimap2_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_minimap2.wdl test/test_task/test_minimap2_input.json $TAG docker
            python3 src/compare_md5.py --keys_to_inspect test_minimap2.skipNfirstlines.output_file \
            --metadata_json test_minimap2_input.metadata.json \
            --reference_json test/test_task/test_minimap2_reference_md5.json \
            --outfile test_minimap2_input.result.json
            cat test_minimap2_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_minimap2_input.result.json
          no_output_timeout: 30m

  test_minimap2_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: *install_singularity
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_minimap2.wdl test/test_task/test_minimap2_input.json $TAG singularity
            python3 src/compare_md5.py --keys_to_inspect test_minimap2.skipNfirstlines.output_file \
            --metadata_json test_minimap2_input.metadata.json \
            --reference_json test/test_task/test_minimap2_reference_md5.json \
            --outfile test_minimap2_input.result.json
            cat test_minimap2_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_minimap2_input.result.json
          no_output_timeout: 30m


# Workflow
workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - test_get_splice_junctions_docker:
          requires:
            - build
      - test_get_splice_junctions_singularity:
          requires:
            - build
      - test_minimap2_docker:
          requires:
            - build
      - test_minimap2_singularity:
          requires:
            - build
      - push_template:
          requires:
            - test_get_splice_junctions_docker
            - test_get_splice_junctions_singularity
