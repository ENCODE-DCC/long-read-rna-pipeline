# CircleCI 2.1 configuration file
# for ENCODE LONG-READ-RNA-SEQ-PIPELINE
# Maintainer: Otto Jolanki

# Defaults and functions
---
version: 2.1
defaults: &defaults
  docker:
    - image: cimg/base@sha256:d75b94c6eae6e660b6db36761709626b93cabe8c8da5b955bfbf7832257e4201
  working_directory: ~/long-read-rna-pipeline

python_defaults: &python_defaults
  docker:
    - image: encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}
  working_directory: ~/long-read-rna-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-2004:202107-02
  working_directory: ~/long-read-rna-pipeline

commands:
  set_env_variables:
    description: "Set environment ready for docker running and pushing"
    steps:
      - run:
          command: |
            echo "export TAG=encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export CROMWELL=./cromwell-70.jar" >> ${BASH_ENV}
            echo "export WOMTOOL=./womtool-70.jar" >> ${BASH_ENV}
            source ${BASH_ENV}

  install_python_requirements:
    description: "Install pytest workflow requirements"
    steps:
      - run: pyenv install 3.7.8
      - run: pyenv global 3.7.8
      - run: pip install --upgrade pip==21.3.1
      - run: pip install -r requirements.txt

  download_file:
    description: "Download a file using wget"
    parameters:
      file_url:
        type: string
    steps:
      - run: wget <<parameters.file_url>>

  prepare_pytest_environment:
    description: "Get machine ready to run caper and pytest-workflow"
    steps:
      - set_env_variables
      - install_python_requirements
      - download_file:
          file_url: "https://github.com/broadinstitute/cromwell/releases/download/70/cromwell-70.jar"
      - download_file:
          file_url: "https://github.com/broadinstitute/cromwell/releases/download/70/womtool-70.jar"

  run_test_tag:
    description: "Run tagged test"
    parameters:
      tag:
        type: string
      wt:
        type: string
    steps:
      - run:
          command: pytest -v --tag <<parameters.tag>> --wt <<parameters.wt>> --symlink --kwd
          no_output_timeout: 60m

  add_docker_tag_to_inputs:
    description: "Add docker tag"
    parameters:
      path_to_inputs:
        type: string
    steps:
      - run:
          command: |
            for json in <<parameters.path_to_inputs>>
            do
              prefix=$(basename $json .json)
              cat $json | jq ".+{\"${prefix}.docker\": \"${TAG}\"}" > tmp.json
              cp tmp.json $json 
              rm tmp.json
            done

# Jobs
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_env_variables
      - run:
          name: build image
          command: |
            echo "pulling template!"
            docker pull encodedcc/long-read-rna-pipeline:template
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker build --cache-from encodedcc/long-read-rna-pipeline:template \
                --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} \
                --build-arg BRANCH=${CIRCLE_BRANCH} \
                --build-arg BUILD_TAG=${TAG} \
                -t $TAG .
            docker push $TAG
            docker logout
          no_output_timeout: 30m

  push_template:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - set_env_variables
        - run:
            command: |
              docker pull $TAG
              docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
              docker tag $TAG encodedcc/long-read-rna-pipeline:template 
              docker push encodedcc/long-read-rna-pipeline:template
              docker logout
            no_output_timeout: 30m

  wdl_unit_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - add_docker_tag_to_inputs:
          path_to_inputs: "test/unit/json/*.json"
      - run_test_tag:
          tag: "unit"
          wt: "4"

  wdl_integration_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run_test_tag:
          tag: "integration"
          wt: "4"

  wdl_functional_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run_test_tag:
          tag: "functional"
          wt: "4"

  wdl_workflow_one_rep_test:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run_test_tag:
          tag: "workflow_one_replicate"
          wt: "4"

  wdl_workflow_two_rep_test:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run_test_tag:
          tag: "workflow_two_replicates"
          wt: "4"

  test_minimap2:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment 
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_minimap2.wdl test/test_task/test_minimap2_input.json
            python3 src/compare_md5.py --keys_to_inspect test_minimap2.skipNfirstlines.output_file test_minimap2.minimap2.mapping_qc \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_minimap2_reference_md5.json \
            --outfile test_minimap2_input.result.json
            cat test_minimap2_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_minimap2_input.result.json
          no_output_timeout: 30m

  test_transcriptclean:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_transcriptclean.wdl test/test_task/test_transcriptclean_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_transcriptclean.transcriptclean.transcript_log \
            test_transcriptclean.transcriptclean.transcript_error_log \
            test_transcriptclean.transcriptclean.corrected_fasta \
            test_transcriptclean.skipNfirstlines.output_file \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_transcriptclean_reference_md5.json \
            --outfile test_transcriptclean_input.result.json
            cat test_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_filter_transcriptclean:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_filter_transcriptclean.wdl test/test_task/test_filter_transcriptclean_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_filter_transcriptclean.skipNfirstlines.output_file \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_filter_transcriptclean_reference_md5.json \
            --outfile test_filter_transcriptclean_input.result.json
            cat test_filter_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_filter_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_init_talon_database:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_init_talon_db.wdl test/test_task/test_init_talon_db_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_init_talon_db.init_talon_db.database test_init_talon_db.init_talon_db.talon_inputs \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_init_talon_db_reference_md5.json \
            --outfile test_init_talon_db_input.result.json
            cat test_init_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_init_talon_db_input.result.json
          no_output_timeout: 30m

  test_init_talon_database_idxprefix:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_init_talon_db.wdl test/test_task/test_init_talon_db_idxprefix_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_init_talon_db.init_talon_db.database test_init_talon_db.init_talon_db.talon_inputs \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_init_talon_db_idxprefix_reference_md5.json \
            --outfile test_init_talon_db_idxprefix_input.result.json
            cat test_init_talon_db_idxprefix_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_init_talon_db_idxprefix_input.result.json
          no_output_timeout: 30m

  test_talon:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_talon.wdl test/test_task/test_talon_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_talon.talon.talon_log \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_talon_reference_md5.json \
            --outfile test_talon_input.result.json
            cat test_talon_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_talon_input.result.json
          no_output_timeout: 30m

  test_create_abundance_from_talon_db:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_create_abundance_from_talon_db.wdl test/test_task/test_create_abundance_from_talon_db_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_abundance_from_talon_db.create_abundance_from_talon_db.talon_abundance \
                              test_create_abundance_from_talon_db.create_abundance_from_talon_db.number_of_genes_detected \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_create_abundance_from_talon_db_reference_md5.json \
            --outfile test_create_abundance_from_talon_db_input.result.json
            cat test_create_abundance_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_abundance_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_create_gtf_from_talon_db:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_create_gtf_from_talon_db.wdl test/test_task/test_create_gtf_from_talon_db_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_gtf_from_talon_db.create_gtf_from_talon_db.gtf \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_create_gtf_from_talon_db_reference_md5.json \
            --outfile test_create_gtf_from_talon_db_input.result.json
            cat test_create_gtf_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_gtf_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_calculate_spearman:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - run: 
          command: |
            test/caper_run.sh test/test_task/test_calculate_spearman.wdl test/test_task/test_calculate_spearman_input.json
            python3 src/compare_md5.py \
            --keys_to_inspect test_calculate_spearman.calculate_spearman.spearman \
            --metadata_json metadata.json \
            --reference_json test/test_task/test_calculate_spearman_reference_md5.json \
            --outfile test_calculate_spearman_input.result.json
            cat test_calculate_spearman_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_calculate_spearman_input.result.json
          no_output_timeout: 30m

# Workflow
workflows:
  build_workflow:
    jobs:
      - build
      - wdl_unit_tests:
          requires:
            - build
      - wdl_integration_tests:
          requires:
            - build
      - wdl_functional_tests:
          requires:
            - build
      - wdl_workflow_one_rep_test:
          requires:
            - build
      - wdl_workflow_two_rep_test:
          requires:
            - build
      - test_minimap2:
          requires:
            - build
      - test_transcriptclean:
          requires:
            - build
      - test_init_talon_database:
          requires:
            - build
      - test_init_talon_database_idxprefix:
          requires:
            - build
      - test_talon:
          requires:
            - build
      - test_create_abundance_from_talon_db:
          requires:
            - build
      - test_create_gtf_from_talon_db:
          requires:
            - build
      - test_calculate_spearman:
          requires:
            - build
      - push_template:
          requires:
            - wdl_unit_tests
            - wdl_integration_tests
            - wdl_functional_tests
            - wdl_workflow_one_rep_test
            - wdl_workflow_two_rep_test
            - test_minimap2
            - test_transcriptclean
            - test_init_talon_database
            - test_init_talon_database_idxprefix
            - test_talon
            - test_create_abundance_from_talon_db
            - test_create_gtf_from_talon_db
            - test_calculate_spearman
