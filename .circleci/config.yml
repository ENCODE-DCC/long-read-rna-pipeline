# CircleCI 2.1 configuration file
# for ENCODE LONG-READ-RNA-SEQ-PIPELINE
# Maintainer: Otto Jolanki

# Defaults and functions
---
version: 2.1
defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/long-read-rna-pipeline

python_defaults: &python_defaults
  docker:
    - image: quay.io/encode-dcc/long-read-rna-pipeline:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}
  working_directory: ~/long-read-rna-pipeline

machine_defaults: &machine_defaults
  machine:
    image: circleci/classic:latest
  working_directory: ~/long-read-rna-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

only_dev_and_master: &only_dev_and_master
  filters:
    branches:
      only: 
        - /^dev.*/
        - master

# Jobs
orbs:
  singularity: singularity/singularity@1.0.3
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/long-read-rna-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/long-read-rna-pipeline:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG .
            docker push $TAG
            docker logout
          no_output_timeout: 30m

  push_template:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - run: *make_tag
        - run:
            command: |
              source ${BASH_ENV}
              docker pull $TAG
              docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
              docker tag $TAG quay.io/encode-dcc/long-read-rna-pipeline:template 
              docker push quay.io/encode-dcc/long-read-rna-pipeline:template
              docker logout
            no_output_timeout: 30m

  test_get_splice_junctions_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh get-splice-junctions.wdl test/test_task/test_get_splice_junctions_input.json $TAG docker
            python3 src/compare_md5.py --keys_to_inspect get_splice_junctions.get_splice_junctions_.splice_junctions \
            --metadata_json test_get_splice_junctions_input.metadata.json \
            --reference_json test/test_task/test_get_splice_junctions_reference_md5.json \
            --outfile test_get_splice_junctions_input.result.json
            cat test_get_splice_junctions_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_get_splice_junctions_input.result.json
          no_output_timeout: 30m

  test_get_splice_junctions_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh get-splice-junctions.wdl test/test_task/test_get_splice_junctions_input.json $TAG singularity
            python3 src/compare_md5.py --keys_to_inspect get_splice_junctions.get_splice_junctions_.splice_junctions \
            --metadata_json test_get_splice_junctions_input.metadata.json \
            --reference_json test/test_task/test_get_splice_junctions_reference_md5.json \
            --outfile test_get_splice_junctions_input.result.json
            cat test_get_splice_junctions_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_get_splice_junctions_input.result.json
          no_output_timeout: 30m

  test_minimap2_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_minimap2.wdl test/test_task/test_minimap2_input.json $TAG docker
            python3 src/compare_md5.py --keys_to_inspect test_minimap2.skipNfirstlines.output_file test_minimap2.minimap2.mapping_qc \
            --metadata_json test_minimap2_input.metadata.json \
            --reference_json test/test_task/test_minimap2_reference_md5.json \
            --outfile test_minimap2_input.result.json
            cat test_minimap2_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_minimap2_input.result.json
          no_output_timeout: 30m

  test_minimap2_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_minimap2.wdl test/test_task/test_minimap2_input.json $TAG singularity
            python3 src/compare_md5.py --keys_to_inspect test_minimap2.skipNfirstlines.output_file test_minimap2.minimap2.mapping_qc \
            --metadata_json test_minimap2_input.metadata.json \
            --reference_json test/test_task/test_minimap2_reference_md5.json \
            --outfile test_minimap2_input.result.json
            cat test_minimap2_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_minimap2_input.result.json
          no_output_timeout: 30m

  test_transcriptclean_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_transcriptclean.wdl test/test_task/test_transcriptclean_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_transcriptclean.transcriptclean.transcript_log \
            test_transcriptclean.transcriptclean.transcript_error_log \
            test_transcriptclean.transcriptclean.corrected_fasta \
            test_transcriptclean.skipNfirstlines.output_file \
            --metadata_json test_transcriptclean_input.metadata.json \
            --reference_json test/test_task/test_transcriptclean_reference_md5.json \
            --outfile test_transcriptclean_input.result.json
            cat test_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_transcriptclean_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_transcriptclean.wdl test/test_task/test_transcriptclean_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_transcriptclean.transcriptclean.transcript_log \
            test_transcriptclean.transcriptclean.transcript_error_log \
            test_transcriptclean.transcriptclean.corrected_fasta \
            test_transcriptclean.skipNfirstlines.output_file \
            --metadata_json test_transcriptclean_input.metadata.json \
            --reference_json test/test_task/test_transcriptclean_reference_md5.json \
            --outfile test_transcriptclean_input.result.json
            cat test_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_filter_transcriptclean_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_filter_transcriptclean.wdl test/test_task/test_filter_transcriptclean_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_filter_transcriptclean.skipNfirstlines.output_file \
            --metadata_json test_filter_transcriptclean_input.metadata.json \
            --reference_json test/test_task/test_filter_transcriptclean_reference_md5.json \
            --outfile test_filter_transcriptclean_input.result.json
            cat test_filter_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_filter_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_filter_transcriptclean_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_filter_transcriptclean.wdl test/test_task/test_filter_transcriptclean_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_filter_transcriptclean.skipNfirstlines.output_file \
            --metadata_json test_filter_transcriptclean_input.metadata.json \
            --reference_json test/test_task/test_filter_transcriptclean_reference_md5.json \
            --outfile test_filter_transcriptclean_input.result.json
            cat test_filter_transcriptclean_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_filter_transcriptclean_input.result.json
          no_output_timeout: 30m

  test_init_talon_database_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_init_talon_db.wdl test/test_task/test_init_talon_db_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_init_talon_db.init_talon_db.database test_init_talon_db.init_talon_db.talon_inputs \
            --metadata_json test_init_talon_db_input.metadata.json \
            --reference_json test/test_task/test_init_talon_db_reference_md5.json \
            --outfile test_init_talon_db_input.result.json
            cat test_init_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_init_talon_db_input.result.json
          no_output_timeout: 30m

  test_init_talon_database_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_init_talon_db.wdl test/test_task/test_init_talon_db_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_init_talon_db.init_talon_db.database test_init_talon_db.init_talon_db.talon_inputs \
            --metadata_json test_init_talon_db_input.metadata.json \
            --reference_json test/test_task/test_init_talon_db_reference_md5.json \
            --outfile test_init_talon_db_input.result.json
            cat test_init_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_init_talon_db_input.result.json
          no_output_timeout: 30m

  test_talon_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_talon.wdl test/test_task/test_talon_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_talon.talon.talon_log \
            --metadata_json test_talon_input.metadata.json \
            --reference_json test/test_task/test_talon_reference_md5.json \
            --outfile test_talon_input.result.json
            cat test_talon_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_talon_input.result.json
          no_output_timeout: 30m

  test_talon_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_talon.wdl test/test_task/test_talon_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_talon.talon.talon_log \
            --metadata_json test_talon_input.metadata.json \
            --reference_json test/test_task/test_talon_reference_md5.json \
            --outfile test_talon_input.result.json
            cat test_talon_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_talon_input.result.json
          no_output_timeout: 30m

  test_create_abundance_from_talon_db_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_create_abundance_from_talon_db.wdl test/test_task/test_create_abundance_from_talon_db_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_abundance_from_talon_db.create_abundance_from_talon_db.talon_abundance \
                              test_create_abundance_from_talon_db.create_abundance_from_talon_db.number_of_genes_detected \
            --metadata_json test_create_abundance_from_talon_db_input.metadata.json \
            --reference_json test/test_task/test_create_abundance_from_talon_db_reference_md5.json \
            --outfile test_create_abundance_from_talon_db_input.result.json
            cat test_create_abundance_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_abundance_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_create_abundance_from_talon_db_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_create_abundance_from_talon_db.wdl test/test_task/test_create_abundance_from_talon_db_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_abundance_from_talon_db.create_abundance_from_talon_db.talon_abundance \
                              test_create_abundance_from_talon_db.create_abundance_from_talon_db.number_of_genes_detected \
            --metadata_json test_create_abundance_from_talon_db_input.metadata.json \
            --reference_json test/test_task/test_create_abundance_from_talon_db_reference_md5.json \
            --outfile test_create_abundance_from_talon_db_input.result.json
            cat test_create_abundance_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_abundance_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_create_gtf_from_talon_db_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_create_gtf_from_talon_db.wdl test/test_task/test_create_gtf_from_talon_db_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_gtf_from_talon_db.create_gtf_from_talon_db.gtf \
            --metadata_json test_create_gtf_from_talon_db_input.metadata.json \
            --reference_json test/test_task/test_create_gtf_from_talon_db_reference_md5.json \
            --outfile test_create_gtf_from_talon_db_input.result.json
            cat test_create_gtf_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_gtf_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_create_gtf_from_talon_db_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_create_gtf_from_talon_db.wdl test/test_task/test_create_gtf_from_talon_db_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_create_gtf_from_talon_db.create_gtf_from_talon_db.gtf \
            --metadata_json test_create_gtf_from_talon_db_input.metadata.json \
            --reference_json test/test_task/test_create_gtf_from_talon_db_reference_md5.json \
            --outfile test_create_gtf_from_talon_db_input.result.json
            cat test_create_gtf_from_talon_db_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_create_gtf_from_talon_db_input.result.json
          no_output_timeout: 30m

  test_calculate_spearman_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_calculate_spearman.wdl test/test_task/test_calculate_spearman_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect test_calculate_spearman.calculate_spearman.spearman \
            --metadata_json test_calculate_spearman_input.metadata.json \
            --reference_json test/test_task/test_calculate_spearman_reference_md5.json \
            --outfile test_calculate_spearman_input.result.json
            cat test_calculate_spearman_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_calculate_spearman_input.result.json
          no_output_timeout: 30m

  test_calculate_spearman_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh test/test_task/test_calculate_spearman.wdl test/test_task/test_calculate_spearman_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect test_calculate_spearman.calculate_spearman.spearman \
            --metadata_json test_calculate_spearman_input.metadata.json \
            --reference_json test/test_task/test_calculate_spearman_reference_md5.json \
            --outfile test_calculate_spearman_input.result.json
            cat test_calculate_spearman_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_calculate_spearman_input.result.json
          no_output_timeout: 30m

  test_workflow_onerep_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh long-read-rna-pipeline.wdl test/test_workflow/test_workflow_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect long_read_rna_pipeline.minimap2.mapping_qc \
                              long_read_rna_pipeline.transcriptclean.transcript_log \
                              long_read_rna_pipeline.transcriptclean.transcript_error_log \
                              long_read_rna_pipeline.transcriptclean.corrected_fasta \
                              long_read_rna_pipeline.talon.talon_log \
                              long_read_rna_pipeline.create_abundance_from_talon_db.number_of_genes_detected \
                              long_read_rna_pipeline.create_abundance_from_talon_db.talon_abundance \
                              long_read_rna_pipeline.create_gtf_from_talon_db.gtf \
            --metadata_json test_workflow_input.metadata.json \
            --reference_json test/test_workflow/test_workflow_reference_md5.json \
            --outfile test_workflow_input.result.json
            cat test_workflow_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_workflow_input.result.json
          no_output_timeout: 30m

  test_workflow_onerep_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh long-read-rna-pipeline.wdl test/test_workflow/test_workflow_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect long_read_rna_pipeline.minimap2.mapping_qc \
                              long_read_rna_pipeline.transcriptclean.transcript_log \
                              long_read_rna_pipeline.transcriptclean.transcript_error_log \
                              long_read_rna_pipeline.transcriptclean.corrected_fasta \
                              long_read_rna_pipeline.talon.talon_log \
                              long_read_rna_pipeline.create_abundance_from_talon_db.number_of_genes_detected \
                              long_read_rna_pipeline.create_abundance_from_talon_db.talon_abundance \
                              long_read_rna_pipeline.create_gtf_from_talon_db.gtf \
            --metadata_json test_workflow_input.metadata.json \
            --reference_json test/test_workflow/test_workflow_reference_md5.json \
            --outfile test_workflow_input.result.json
            cat test_workflow_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_workflow_input.result.json
          no_output_timeout: 30m

  test_workflow_tworep_docker:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh long-read-rna-pipeline.wdl test/test_workflow/test_workflow_2reps_input.json $TAG docker
            python3 src/compare_md5.py \
            --keys_to_inspect long_read_rna_pipeline.minimap2.mapping_qc \
                              long_read_rna_pipeline.transcriptclean.transcript_log \
                              long_read_rna_pipeline.transcriptclean.transcript_error_log \
                              long_read_rna_pipeline.transcriptclean.corrected_fasta \
                              long_read_rna_pipeline.talon.talon_log \
                              long_read_rna_pipeline.create_abundance_from_talon_db.number_of_genes_detected \
                              long_read_rna_pipeline.create_abundance_from_talon_db.talon_abundance \
                              long_read_rna_pipeline.create_gtf_from_talon_db.gtf \
                              long_read_rna_pipeline.calculate_spearman.spearman \
            --metadata_json test_workflow_2reps_input.metadata.json \
            --reference_json test/test_workflow/test_workflow_2reps_reference_md5.json \
            --outfile test_workflow_2reps_input.result.json
            cat test_workflow_2reps_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_workflow_2reps_input.result.json
          no_output_timeout: 30m

  test_workflow_tworep_singularity:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - singularity/install-go
      - singularity/debian-install-3
      - run: 
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test.sh long-read-rna-pipeline.wdl test/test_workflow/test_workflow_2reps_input.json $TAG singularity
            python3 src/compare_md5.py \
            --keys_to_inspect long_read_rna_pipeline.minimap2.mapping_qc \
                              long_read_rna_pipeline.transcriptclean.transcript_log \
                              long_read_rna_pipeline.transcriptclean.transcript_error_log \
                              long_read_rna_pipeline.transcriptclean.corrected_fasta \
                              long_read_rna_pipeline.talon.talon_log \
                              long_read_rna_pipeline.create_abundance_from_talon_db.number_of_genes_detected \
                              long_read_rna_pipeline.create_abundance_from_talon_db.talon_abundance \
                              long_read_rna_pipeline.create_gtf_from_talon_db.gtf \
                              long_read_rna_pipeline.calculate_spearman.spearman \
            --metadata_json test_workflow_2reps_input.metadata.json \
            --reference_json test/test_workflow/test_workflow_2reps_reference_md5.json \
            --outfile test_workflow_2reps_input.result.json
            cat test_workflow_2reps_input.result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < test_workflow_2reps_input.result.json
          no_output_timeout: 30m

# Workflow
workflows:
  build_workflow:
    jobs:
      - build
      - test_get_splice_junctions_docker:
          requires:
            - build
      - test_get_splice_junctions_singularity:
          requires:
            - build
      - test_minimap2_docker:
          requires:
            - build
      - test_minimap2_singularity:
          requires:
            - build
      - test_transcriptclean_docker:
          requires:
            - build
      - test_transcriptclean_singularity:
          requires:
            - build
      - test_filter_transcriptclean_docker:
          requires:
            - build
      - test_filter_transcriptclean_singularity:
          requires:
            - build
      - test_init_talon_database_docker:
          requires:
            - build
      - test_init_talon_database_singularity:
          requires:
            - build
      - test_talon_docker:
          requires:
            - build
      - test_talon_singularity:
          requires:
            - build
      - test_create_abundance_from_talon_db_docker:
          requires:
            - build
      - test_create_abundance_from_talon_db_singularity:
          requires:
            - build
      - test_create_gtf_from_talon_db_docker:
          requires:
            - build
      - test_create_gtf_from_talon_db_singularity:
          requires:
            - build
      - test_calculate_spearman_docker:
          requires:
            - build
      - test_calculate_spearman_singularity:
          requires:
            - build
      - test_workflow_onerep_docker:
          <<: *only_dev_and_master
          requires:
            - build
      - test_workflow_onerep_singularity:
          <<: *only_dev_and_master
          requires:
            - build
      - test_workflow_tworep_docker:
          <<: *only_dev_and_master
          requires:
            - build
      - test_workflow_tworep_singularity:
          <<: *only_dev_and_master
          requires:
            - build
      - push_template:
          requires:
            - test_get_splice_junctions_docker
            - test_get_splice_junctions_singularity
            - test_minimap2_docker
            - test_minimap2_singularity
            - test_transcriptclean_docker
            - test_transcriptclean_singularity
            - test_filter_transcriptclean_docker
            - test_filter_transcriptclean_singularity
            - test_init_talon_database_docker
            - test_init_talon_database_singularity
            - test_talon_docker
            - test_talon_singularity
            - test_create_abundance_from_talon_db_docker
            - test_create_abundance_from_talon_db_singularity
            - test_create_gtf_from_talon_db_docker
            - test_create_gtf_from_talon_db_singularity
            - test_calculate_spearman_docker
            - test_calculate_spearman_singularity
            - test_workflow_onerep_docker
            - test_workflow_onerep_singularity
            - test_workflow_tworep_docker
            - test_workflow_tworep_singularity